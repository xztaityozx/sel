name: Go

on: ["push"]
jobs:
  linter:
    name: "golang-linter"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.29
    
  test:
    name: Unit Test
    needs: [linter]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - uses: actions/checkout@v2.3.3
      - name: before cache
        run: |
          mkdir -p ~/go/pkg/mod
      - uses: actions/cache@v2.1.2
        id: cache-go
        with:
          key: ${{ matrix.os }}-go-${{ hashFiles('**/go.sum') }}
          path: ~/go/pkg/mod
          restore-keys: |
            go-${{ matrix.os }}-
      - name: Setup GoLang
        uses: actions/setup-go@v2.1.3
        with:
          go-version: ^1.15
      - name: Get Dependencies
        if: steps.cache-go.outputs.cache-hit != 'true'
        run: go get -v -t -d ./...

      - name: Test
        run: |
          go test -v ./...
  
  build:
    name: Build release binary
    runs-on: ${{ matrix.os }}
    needs: [linter, test]
    if: contains(github.ref, 'tags/v')
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    
    steps:
      - uses: actions/checkout@v2.3.3
      - name: before cache
        run: |
          mkdir -p ~/go/pkg/mod
      - uses: actions/cache@v2.1.2
        id: cache-go
        with:
          key: ${{ matrix.os }}-go-${{ hashFiles('**/go.sum') }}
          path: ~/go/pkg/mod
          restore-keys: |
            go-${{ matrix.os }}-
      - name: Setup GoLang
        uses: actions/setup-go@v2.1.3
        with:
          go-version: ^1.15
      - name: Get Dependencies
        if: steps.cache-go.outputs.cache-hit != 'true'
        run: go get -v -t -d ./...

      - name: vars
        id: vars
        shell: bash
        run: |
          echo ::set-output name=os::"$(echo ${{ matrix.os }} | sed 's/-latest//g;s/ubuntu/linux/g')"
          echo ::set-output name=version::${TAG_REF_NAME##*/v}
        env:
          TAG_REF_NAME: ${{ github.ref }}

      - name: Build
        run: |
          go build -v -o ${{ steps.vars.outputs.os }}
          
      - name: Upload artifact
        uses: actions/upload-artifact@v2.2.0
        with:
          name: ${{ steps.vars.outputs.os }}
          path: ./${{ steps.vars.outputs.os }}
  
  create-release:
    needs: [linter, test, build]
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: vars
        id: vars
        run: |
          echo ::set-output name=version::${TAG_REF_NAME##*/v}
        env:
          TAG_REF_NAME: ${{ github.ref }}
      
      - name: Create Release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.vars.outputs.version }}
          release_name: Release ${{ steps.vars.outputs.version }}
          draft: false
          prerelease: false

      - name: Output release url
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
        
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v2.2.0
        with:
          name: release_url
          path: release_url.txt

  
